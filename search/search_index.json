{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SubNotify Overview Sublime Text notification plugin for (Windows|macOS|Linux). Features Native windows taskbar bubble notifications. MacOS Notification Support via terminal-notifier : julienXX/terminal-notifier . Linux support via notify-send .","title":"About SubNotify"},{"location":"#subnotify","text":"","title":"SubNotify"},{"location":"#overview","text":"Sublime Text notification plugin for (Windows|macOS|Linux).","title":"Overview"},{"location":"#features","text":"Native windows taskbar bubble notifications. MacOS Notification Support via terminal-notifier : julienXX/terminal-notifier . Linux support via notify-send .","title":"Features"},{"location":"contributing/","text":"Contributing & Support Overview Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Bug Reports Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->SubNotify->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"contributing/#overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->SubNotify->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"contributing/#running-validation-tests","text":"Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"installation/","text":"Installation Package Control The recommended way to install SubNotify is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing SubNotify ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation Warning This is not the recommended way to install SubNotify for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone SubNotify and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install SubNotify without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe \u2192 markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 \u2192 python-jinja2 packagecontrol/pygments \u2192 pygments facelessuser/sublime-markdown-popups \u2192 mdpopups facelessuser/sublime-markdown \u2192 python-markdown Download and unpack or git clone the latest SubNotify release and unpack as SubNotify : facelessuser/SubNotify \u2192 SubNotify Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy. Git Cloning Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/SubNotify.git SubNotify Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install SubNotify is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing SubNotify ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install SubNotify for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone SubNotify and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install SubNotify without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe \u2192 markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 \u2192 python-jinja2 packagecontrol/pygments \u2192 pygments facelessuser/sublime-markdown-popups \u2192 mdpopups facelessuser/sublime-markdown \u2192 python-markdown Download and unpack or git clone the latest SubNotify release and unpack as SubNotify : facelessuser/SubNotify \u2192 SubNotify Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/SubNotify.git SubNotify Restart Sublime Text.","title":"Git Cloning"},{"location":"license/","text":"License SubNotify is released under the MIT license. Copyright \u00a9 2013 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"SubNotify is released under the MIT license. Copyright \u00a9 2013 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"usage/","text":"User Guide Using SubNotify in a Plugin sub_notify Command that displays the notification for Sublime Text. Parameters : Parameter Type Description title string Required notification title. msg string Required notification message. sound boolean Optional parameter to enable a audible alert. Default is False . level string Optional parameter to specify the notification level. Available options are: info , warning , error . Default is info . Example class SubNotifyTestCommand ( sublime_plugin . ApplicationCommand ): def run ( self ): sublime . run_command ( \"sub_notify\" , { \"title\" : \"SubNotify\" , \"msg\" : \"Debug test popup!\" , \"sound\" : False }) Tips and Tricks for Developers When using in a plugin, it is recommended to make SubNotify usage optional. Also, it is recommended to make sound optional as well. Depending on the situation, you can have notifications fall back to either status bar notification or a Sublime Text dialog, but regardless of the fallback option, the approach is the same. You can start by first creating a dummy Notify object for when SubNotify is not available. This way you can reference the same methods to check for availability regardless of whether SubNotify is installed or not. import sublime try : from SubNotify.sub_notify import SubNotifyIsReadyCommand as Notify except Exception : class Notify ( object ): \"\"\"Notify fallback.\"\"\" @classmethod def is_ready ( cls ): \"\"\"Return false to effectively disable SubNotify.\"\"\" return False Then you can create common notification methods that call either the SubNotify command (if enabled) or the fallback. Notice that for the given plugin, you can check the users preference via that plugin's settings file and check if SubNotify is ready (in the case it is not installed, the dummy object will return False ). def notify ( msg ): \"\"\"Notify msg.\"\"\" settings = sublime . load_settings ( \"reg_replace.sublime-settings\" ) if settings . get ( \"use_sub_notify\" , False ) and Notify . is_ready (): sublime . run_command ( \"sub_notify\" , { \"title\" : \"RegReplace\" , \"msg\" : msg }) else : sublime . status_message ( msg ) def error ( msg ): \"\"\"Error msg.\"\"\" settings = sublime . load_settings ( \"reg_replace.sublime-settings\" ) if settings . get ( \"use_sub_notify\" , False ) and Notify . is_ready (): sublime . run_command ( \"sub_notify\" , { \"title\" : \"RegReplace\" , \"msg\" : msg , \"level\" : \"error\" }) else : sublime . error_message ( \"RegReplace: \\n %s \" % msg ) That's it. There are a number of approaches you can take. This is just one. Windows Taskbar Notifications If you'd like to change the sound used, you can modify it via the following setting: // Default sound. Must be a `.wav` file. \"windows_audio\" : \"C:/Windows/Media/notify.wav\" , Linux Ensure you have notify-send installed on your system. It should be accessible via the command line. If you'd like to change/configure the sound used, you can modify it via the following settings: // Default audio player. Must be paplay, aplay, or play. \"linux_audio_player\" : \"paplay\" , // Default sound. Accepted file types are dependant on the player: // - paplay: .wav, .mp3, or .ogg // - aplay: .wav or .mp3 // - play: .wav or .mp3 \"linux_audio\" : null , By default, there is no audio file defined as distro audio could differ. Mac Notification Center Ensure you have terminal-notifier installed. The recommended way is via HomeBrew , but there are other ways; see the repository for more info. If necessary, you may have to update the terminal notifier path in the settings file if the internal default does not match your own. If you choose to install via another method, the path may be different. The path should be defined as the absolute path to terminal-notifier. // terminal-notifier path for Notification Center // Internal default when this is not defined is: // /Library/Ruby/Gems/2.0.0/gems/terminal-notifier-1.5.1/bin/terminal-notifier // This assumes installed with gem \"terminal_notifier_path\" : \"/Library/Ruby/Gems/2.0.0/gems/terminal-notifier-1.5.1/bin/terminal-notifier\" If you'd like to change the sound used, you can modify it via the following setting: // Default sound. Must be a .wav, .mp3, or .aiff file. \"macos_audio\" : \"/System/Library/Sounds/Glass.aiff\" ,","title":"User Guide"},{"location":"usage/#user-guide","text":"","title":"User Guide"},{"location":"usage/#using-subnotify-in-a-plugin","text":"sub_notify Command that displays the notification for Sublime Text. Parameters : Parameter Type Description title string Required notification title. msg string Required notification message. sound boolean Optional parameter to enable a audible alert. Default is False . level string Optional parameter to specify the notification level. Available options are: info , warning , error . Default is info . Example class SubNotifyTestCommand ( sublime_plugin . ApplicationCommand ): def run ( self ): sublime . run_command ( \"sub_notify\" , { \"title\" : \"SubNotify\" , \"msg\" : \"Debug test popup!\" , \"sound\" : False })","title":"Using SubNotify in a Plugin"},{"location":"usage/#tips-and-tricks-for-developers","text":"When using in a plugin, it is recommended to make SubNotify usage optional. Also, it is recommended to make sound optional as well. Depending on the situation, you can have notifications fall back to either status bar notification or a Sublime Text dialog, but regardless of the fallback option, the approach is the same. You can start by first creating a dummy Notify object for when SubNotify is not available. This way you can reference the same methods to check for availability regardless of whether SubNotify is installed or not. import sublime try : from SubNotify.sub_notify import SubNotifyIsReadyCommand as Notify except Exception : class Notify ( object ): \"\"\"Notify fallback.\"\"\" @classmethod def is_ready ( cls ): \"\"\"Return false to effectively disable SubNotify.\"\"\" return False Then you can create common notification methods that call either the SubNotify command (if enabled) or the fallback. Notice that for the given plugin, you can check the users preference via that plugin's settings file and check if SubNotify is ready (in the case it is not installed, the dummy object will return False ). def notify ( msg ): \"\"\"Notify msg.\"\"\" settings = sublime . load_settings ( \"reg_replace.sublime-settings\" ) if settings . get ( \"use_sub_notify\" , False ) and Notify . is_ready (): sublime . run_command ( \"sub_notify\" , { \"title\" : \"RegReplace\" , \"msg\" : msg }) else : sublime . status_message ( msg ) def error ( msg ): \"\"\"Error msg.\"\"\" settings = sublime . load_settings ( \"reg_replace.sublime-settings\" ) if settings . get ( \"use_sub_notify\" , False ) and Notify . is_ready (): sublime . run_command ( \"sub_notify\" , { \"title\" : \"RegReplace\" , \"msg\" : msg , \"level\" : \"error\" }) else : sublime . error_message ( \"RegReplace: \\n %s \" % msg ) That's it. There are a number of approaches you can take. This is just one.","title":"Tips and Tricks for Developers"},{"location":"usage/#windows-taskbar-notifications","text":"If you'd like to change the sound used, you can modify it via the following setting: // Default sound. Must be a `.wav` file. \"windows_audio\" : \"C:/Windows/Media/notify.wav\" ,","title":"Windows Taskbar Notifications"},{"location":"usage/#linux","text":"Ensure you have notify-send installed on your system. It should be accessible via the command line. If you'd like to change/configure the sound used, you can modify it via the following settings: // Default audio player. Must be paplay, aplay, or play. \"linux_audio_player\" : \"paplay\" , // Default sound. Accepted file types are dependant on the player: // - paplay: .wav, .mp3, or .ogg // - aplay: .wav or .mp3 // - play: .wav or .mp3 \"linux_audio\" : null , By default, there is no audio file defined as distro audio could differ.","title":"Linux"},{"location":"usage/#mac-notification-center","text":"Ensure you have terminal-notifier installed. The recommended way is via HomeBrew , but there are other ways; see the repository for more info. If necessary, you may have to update the terminal notifier path in the settings file if the internal default does not match your own. If you choose to install via another method, the path may be different. The path should be defined as the absolute path to terminal-notifier. // terminal-notifier path for Notification Center // Internal default when this is not defined is: // /Library/Ruby/Gems/2.0.0/gems/terminal-notifier-1.5.1/bin/terminal-notifier // This assumes installed with gem \"terminal_notifier_path\" : \"/Library/Ruby/Gems/2.0.0/gems/terminal-notifier-1.5.1/bin/terminal-notifier\" If you'd like to change the sound used, you can modify it via the following setting: // Default sound. Must be a .wav, .mp3, or .aiff file. \"macos_audio\" : \"/System/Library/Sounds/Glass.aiff\" ,","title":"Mac Notification Center"},{"location":"_snippets/abbr/","text":"","title":"Abbr"},{"location":"_snippets/links/","text":"","title":"Links"},{"location":"_snippets/refs/","text":"","title":"Refs"}]}